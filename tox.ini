[tox]
envlist = py38,py39,py310,py311,coverage,lint,docs
isolated_build = true
skip_missing_interpreters = true

[testenv]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt
commands = 
    pytest {posargs:tests/test_integration.py -v -m "not (performance or stress)"}

[testenv:coverage]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt
commands = 
    pytest tests/ -v --cov=designer2 --cov=lib --cov-report=term-missing --cov-report=html --cov-report=xml
    coverage report --fail-under=70

[testenv:performance] 
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt
commands = 
    pytest tests/test_performance.py -v -m "performance"

[testenv:stress]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt
commands = 
    pytest tests/test_performance.py -v -m "stress" --timeout=300

[testenv:lint]
deps = 
    black
    flake8
    mypy
    bandit
commands = 
    black --check designer2 lib tests
    flake8 designer2 lib tests
    mypy designer2 lib --ignore-missing-imports
    bandit -r designer2 lib

[testenv:format]
deps = 
    black
    isort
commands = 
    black designer2 lib tests
    isort designer2 lib tests

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    myst-parser
changedir = docs
commands = 
    sphinx-build -W -b html . _build/html

[testenv:clean]
deps = coverage
skip_install = true
commands = 
    coverage erase
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"

[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    docs/

[coverage:run]
source = designer2, lib
omit = 
    */tests/*
    */test_*
    setup.py
    */build/*
    */dist/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
